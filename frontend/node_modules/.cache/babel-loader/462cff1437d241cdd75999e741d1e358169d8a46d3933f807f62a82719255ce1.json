{"ast":null,"code":"export const loginUser = async (email, password) => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/login-user`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        email,\n        password\n      })\n    });\n    const data = await response.json();\n    if (!response.ok) {\n      throw new Error(data.message || 'Login failed');\n    }\n    return data;\n  } catch (error) {\n    console.error('Login error:', error);\n    throw error;\n  }\n};\nexport const registerUser = async userData => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/register-user`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(userData)\n    });\n    const data = await response.json();\n    if (!response.ok) {\n      throw new Error(data.message || 'Registration failed');\n    }\n    return data;\n  } catch (error) {\n    console.error('Registration error:', error);\n    throw error;\n  }\n};\nexport const fetchWithHeaders = async (endpoint, customHeaders) => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/${endpoint}`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        ...customHeaders\n      }\n    });\n    const data = await response.json();\n    if (!response.ok) {\n      throw new Error(data.message || 'Failed to fetch data');\n    }\n    return data;\n  } catch (error) {\n    console.error('Fetch error:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["loginUser","email","password","response","fetch","API_BASE_URL","method","headers","body","JSON","stringify","data","json","ok","Error","message","error","console","registerUser","userData","fetchWithHeaders","endpoint","customHeaders"],"sources":["C:/Users/Marcel/Downloads/FoodHub/frontend/src/services/api.js"],"sourcesContent":["export const loginUser = async (email, password) => {\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/login-user`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({ email, password }),\r\n    });\r\n    \r\n    const data = await response.json();\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(data.message || 'Login failed');\r\n    }\r\n    \r\n    return data;\r\n  } catch (error) {\r\n    console.error('Login error:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport const registerUser = async (userData) => {\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/register-user`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(userData),\r\n    });\r\n    \r\n    const data = await response.json();\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(data.message || 'Registration failed');\r\n    }\r\n    \r\n    return data;\r\n  } catch (error) {\r\n    console.error('Registration error:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport const fetchWithHeaders = async (endpoint, customHeaders) => {\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/${endpoint}`, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        ...customHeaders,\r\n      },\r\n    });\r\n\r\n    const data = await response.json();\r\n\r\n    if (!response.ok) {\r\n      throw new Error(data.message || 'Failed to fetch data');\r\n    }\r\n\r\n    return data;\r\n  } catch (error) {\r\n    console.error('Fetch error:', error);\r\n    throw error;\r\n  }\r\n};"],"mappings":"AAAA,OAAO,MAAMA,SAAS,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;EAClD,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGC,YAAY,aAAa,EAAE;MACzDC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAET,KAAK;QAAEC;MAAS,CAAC;IAC1C,CAAC,CAAC;IAEF,MAAMS,IAAI,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;IAElC,IAAI,CAACT,QAAQ,CAACU,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAACH,IAAI,CAACI,OAAO,IAAI,cAAc,CAAC;IACjD;IAEA,OAAOJ,IAAI;EACb,CAAC,CAAC,OAAOK,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,cAAc,EAAEA,KAAK,CAAC;IACpC,MAAMA,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAME,YAAY,GAAG,MAAOC,QAAQ,IAAK;EAC9C,IAAI;IACF,MAAMhB,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGC,YAAY,gBAAgB,EAAE;MAC5DC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACS,QAAQ;IAC/B,CAAC,CAAC;IAEF,MAAMR,IAAI,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;IAElC,IAAI,CAACT,QAAQ,CAACU,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAACH,IAAI,CAACI,OAAO,IAAI,qBAAqB,CAAC;IACxD;IAEA,OAAOJ,IAAI;EACb,CAAC,CAAC,OAAOK,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;IAC3C,MAAMA,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAMI,gBAAgB,GAAG,MAAAA,CAAOC,QAAQ,EAAEC,aAAa,KAAK;EACjE,IAAI;IACF,MAAMnB,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGC,YAAY,IAAIgB,QAAQ,EAAE,EAAE;MAC1Df,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClC,GAAGe;MACL;IACF,CAAC,CAAC;IAEF,MAAMX,IAAI,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;IAElC,IAAI,CAACT,QAAQ,CAACU,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAACH,IAAI,CAACI,OAAO,IAAI,sBAAsB,CAAC;IACzD;IAEA,OAAOJ,IAAI;EACb,CAAC,CAAC,OAAOK,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,cAAc,EAAEA,KAAK,CAAC;IACpC,MAAMA,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}